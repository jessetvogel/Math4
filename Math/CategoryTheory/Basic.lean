import Math.Data.Function

namespace CategoryTheory

class Category (Œ± : Sort u) where
  hom     : Œ± ‚Üí Œ± ‚Üí Sort v
  id      : ‚àÄ (X : Œ±), hom X X
  comp    : ‚àÄ {X Y Z : Œ±}, (hom Y Z) ‚Üí (hom X Y) ‚Üí (hom X Z)
  comp_id : ‚àÄ {X Y : Œ±} (f : hom X Y), comp f (id X) = f := by simp
  id_comp : ‚àÄ {X Y : Œ±} (f : hom X Y), comp (id Y) f = f := by simp
  comp_assoc   : ‚àÄ {W X Y Z : Œ±} (h : hom Y Z) (g : hom X Y) (f : hom W X), comp (comp h g) f = comp h (comp g f) := by simp

infixr:80 " ‚àò " => Category.comp
prefix:max "ùüô " => Category.id

attribute [simp] Category.comp_id Category.id_comp Category.comp_assoc

variable [Category Œ±] {X Y : Œ±}

open Category

/-- A morphism f : X ‚Üí Y is mono if f ‚àò g = f ‚àò h implies g = h for all g and h. -/
class mono (f : hom X Y) : Prop :=
  cancel : ‚àÄ {Z : Œ±} {g h : hom Z X}, f ‚àò g = f ‚àò h ‚Üí g = h

/-- A morphism f : X ‚Üí Y is epi if g ‚àò f = h ‚àò f implies g = h for all g and h. -/
class epi (f : hom X Y) : Prop :=
  cancel : ‚àÄ {Z : Œ±} {g h : hom Y Z}, g ‚àò f = h ‚àò f ‚Üí g = h

class split_mono (f : hom X Y) : Prop :=
  left_inv : ‚àÉ g, g ‚àò f = ùüô X

class split_epi (f : hom X Y) : Prop :=
  right_inv : ‚àÉ g, f ‚àò g = ùüô Y

/-- If `f` and `g` are mono, then so is `g ‚àò f`. -/
instance mono_comp (g : hom Y Z) (f : hom X Y) [hf : mono f] [hg : mono g] : mono (g ‚àò f) where
  cancel h := by simp at h; exact hf.cancel (hg.cancel h)

/-- If `f` and `g` are epi, then so is `g ‚àò f`. -/
instance epi_comp (g : hom Y Z) (f : hom X Y) [hf : epi f] [hg : epi g] : epi (g ‚àò f) where
  cancel h := by rw [‚Üê comp_assoc, ‚Üê comp_assoc] at h; exact hg.cancel (hf.cancel h)

/-- If `g ‚àò f` is mono, then so is `f`. -/
theorem mono_right (g : hom Y Z) (f : hom X Y) [h : mono (g ‚àò f)] : mono f :=
  ‚ü®Œª h' => by apply h.cancel; simp; rw [h']‚ü©

/-- If `g ‚àò f` is epi, then so is `g`. -/
theorem epi_left (g : hom Y Z) (f : hom X Y) [h : epi (g ‚àò f)] : epi g :=
  ‚ü®Œª h' => by apply h.cancel; rw [‚Üê comp_assoc, h', comp_assoc]‚ü©

/-- If `f` is split mono, then it is mono. -/
instance mono_of_split_mono (f : hom X Y) [h : split_mono f] : mono f where
  cancel t := by {
    match h.left_inv with
    | Exists.intro g hg => {
      have t := congrArg (comp g) t;
      rw [‚Üê Category.comp_assoc, ‚Üê Category.comp_assoc, hg, Category.id_comp, Category.id_comp] at t;
      exact t;
    }
  }

/-- If `f` is split epi, then it is epi. -/
instance epi_of_split_epi (f : hom X Y) [h : split_epi f] : epi f where
  cancel {Z' g' h'} t := by {
    match h.right_inv with
    | Exists.intro g hg => {
      have t := congrArg (Œª k => comp k g) t;
      simp [hg] at t;
      exact t;
    }
  }

structure Iso (X Y : Œ±) where
  hom : Category.hom X Y
  inv : Category.hom Y X
  inv_comp : inv ‚àò hom = ùüô X := by simp
  comp_inv : hom ‚àò inv = ùüô Y := by simp

def Iso.id (X : Œ±) : Iso X X := {
  hom := ùüô X,
  inv := ùüô X
}

def Iso.comp {X Y Z : Œ±} (g : Iso Y Z) (f : Iso X Y) : Iso X Z := {
  hom := g.hom ‚àò f.hom,
  inv := f.inv ‚àò g.inv,
  inv_comp := by rw [comp_assoc, ‚Üê comp_assoc g.inv, g.inv_comp, id_comp, f.inv_comp],
  comp_inv := by rw [comp_assoc, ‚Üê comp_assoc f.hom, f.comp_inv, id_comp, g.comp_inv],
}

def Iso.inverse (f : Iso X Y) : Iso Y X := {
  hom := f.inv,
  inv := f.hom,
  inv_comp := f.comp_inv,
  comp_inv := f.inv_comp
}

class initial (X : Œ±) : Prop where
  is_initial : ‚àÄ (Y : Œ±), ‚àÉ (f : hom X Y), ‚àÄ (g : hom X Y), f = g

class terminal (Y : Œ±) : Prop where
  is_terminal : ‚àÄ (X : Œ±), ‚àÉ (f : hom X Y), ‚àÄ (g : hom X Y), f = g

class zero (X : Œ±) : Prop where
  is_zero : initial X ‚àß terminal X

-- structure Isomorphism {C : Category} (X Y : C.obj) where
--   f : C.hom X Y
--   g : C.hom Y X
--   comp_gf : g ‚àò f = C.id X := by simp
--   comp_fg : f ‚àò g = C.id Y := by simp

-- infix:80 " ‚âÖ " => Isomorphism

-- def Isomorphism.comp (i‚ÇÇ : Y ‚âÖ Z) (i‚ÇÅ : X ‚âÖ Y) : X ‚âÖ Z := {
--   f := i‚ÇÇ.f ‚àò i‚ÇÅ.f,
--   g := i‚ÇÅ.g ‚àò i‚ÇÇ.g,
--   comp_gf := by rw [C.comp_assoc, ‚Üê C.comp_assoc i‚ÇÇ.g, i‚ÇÇ.comp_gf, C.id_comp, i‚ÇÅ.comp_gf],
--   comp_fg := by rw [C.comp_assoc, ‚Üê C.comp_assoc i‚ÇÅ.f, i‚ÇÅ.comp_fg, C.id_comp, i‚ÇÇ.comp_fg],
-- }

-- def Isomorphism.id (X : C.obj) : X ‚âÖ X := {
--   f := C.id X,
--   g := C.id X
-- }

namespace Category

class thin (Œ± : Type u) [Category Œ±] : Prop :=
  is_thin : ‚àÄ {X Y : Œ±} (f g : hom X Y), f = g

-- Opposite category
-- def op : Category := {
--   obj := C.obj,
--   hom := Œª X Y => C.hom Y X,
--   id := C.id,
--   comp := Œª g f => f ‚àò g,
-- }

/-- The product category. -/
instance product [Category Œ±] [Category Œ≤] : Category (Œ± √ó Œ≤) where
  hom X Y := hom X.1 Y.1 √ó hom X.2 Y.2
  id X := ‚ü®id X.1, id X.2‚ü©
  comp g f := ‚ü®g.1 ‚àò f.1, g.2 ‚àò f.2‚ü©
  comp_id f := by simp
  id_comp f := by simp
  comp_assoc h g f := by simp

/-- The sum category. -/
instance sum [Category Œ±] [Category Œ≤] : Category (Sum Œ± Œ≤) where
  hom X Y := match X, Y with
    | Sum.inl X, Sum.inl Y => hom X Y
    | Sum.inl _, Sum.inr _ => PEmpty
    | Sum.inr _, Sum.inl _ => PEmpty
    | Sum.inr X, Sum.inr Y => hom X Y
  id X := match X with
    | Sum.inl X => id X
    | Sum.inr X => id X
  comp {X Y Z} g f := match X, Y, Z, g, f with
    | Sum.inl _, Sum.inl _, Sum.inl _, g, f => g ‚àò f
    | Sum.inr _, Sum.inr _, Sum.inr _, g, f => g ‚àò f
  comp_id {X Y} f := match X, Y, f with
    | Sum.inl _, Sum.inl _, f => comp_id f
    | Sum.inr _, Sum.inr _, f => comp_id f
  id_comp {X Y} f := match X, Y, f with
    | Sum.inl _, Sum.inl _, f => id_comp f
    | Sum.inr _, Sum.inr _, f => id_comp f
  comp_assoc {W X Y Z} h g f := match W, X, Y, Z, h, g, f with
    | Sum.inl _, Sum.inl _, Sum.inl _, Sum.inl _, h, g, f => comp_assoc h g f
    | Sum.inr _, Sum.inr _, Sum.inr _, Sum.inr _, h, g, f => comp_assoc h g f

end Category

/-- Category of types. -/
instance CatType : Category (Sort u) where
  hom Œ± Œ≤ := Œ± ‚Üí Œ≤
  id _ := id
  comp := Function.comp
  comp_id _ := by rfl
  id_comp _ := by rfl
  comp_assoc _ _ _ := by rfl

-- A morphism in CatType is epi if and only if it is surjective
def CatType.epi_iff_surj (f : CatType.hom Œ± Œ≤) : epi f ‚Üî Function.surjective f := ‚ü®
  Œª hf y => by {
    apply Classical.byContradiction;
    intro h;
    sorry;
  },
  Œª h => ‚ü® Œª t => by funext y; cases h y with | intro x hx => rw [‚Üê hx]; exact congrFun t x‚ü©
‚ü©

-- A morphism in CatType is mono if and only if it is injective
def CatType.mono_iff_inj (f : CatType.hom Œ± Œ≤) : mono f ‚Üî Function.injective f := ‚ü®
  Œª hf x y hxy => by {
    -- Construct two functions, g h : 1 ‚Üí X, which sends to x and y
    let g : PUnit ‚Üí Œ± := Œª _ => x;
    let h : PUnit ‚Üí Œ± := Œª _ => y;
    -- Then f ‚àò g = f ‚àò h by assumption
    have t : CatType.comp f g = CatType.comp f h := by funext _; exact hxy;
    -- Cancel f using mono
    exact congrFun (hf.cancel t) PUnit.unit;
  },
  Œª hf => ‚ü®Œª t => by funext _; exact hf (congrFun t _)‚ü©
‚ü©

end CategoryTheory
