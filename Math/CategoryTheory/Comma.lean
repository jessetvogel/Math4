import Math.CategoryTheory.Basic
import Math.CategoryTheory.Functor

namespace CategoryTheory

open Category

variable [Category Œ±] [Category Œ≤] [Category Œ≥]

structure Comma (F : Functor Œ± Œ≥) (G : Functor Œ≤ Œ≥) where
  left : Œ±
  right : Œ≤
  hom : hom (F.obj left) (G.obj right)

variable {F : Functor Œ± Œ≥} {G : Functor Œ≤ Œ≥}

structure CommaHom (X Y : Comma F G) where
  left : hom X.left Y.left
  right : hom X.right Y.right
  comm : Y.hom ‚àò (F.map left) = (G.map right) ‚àò X.hom

def CommaHom.id (X : Comma F G) : CommaHom X X := {
  left := ùüô X.left,
  right := ùüô X.right,
  comm := by rw [F.map_id, comp_id, G.map_id, id_comp]
}

def CommaHom.comp {X Y Z : Comma F G} (g : CommaHom Y Z) (f : CommaHom X Y) : CommaHom X Z := {
  left := g.left ‚àò f.left,
  right := g.right ‚àò f.right,
  comm := by rw [Functor.map_comp, ‚Üê comp_assoc, g.comm, Functor.map_comp, comp_assoc, f.comm, comp_assoc],
}

instance CatComma (F : Functor Œ± Œ≥) (G : Functor Œ≤ Œ≥) : Category (Comma F G) where
  hom := CommaHom
  id := CommaHom.id
  comp := CommaHom.comp
  comp_id f := by dsimp; unfold CommaHom.comp, CommaHom.id; congr; rw [comp_id]; rw [comp_id]
  id_comp f := by dsimp; unfold CommaHom.comp, CommaHom.id; congr; rw [id_comp]; rw [id_comp]
  comp_assoc h g f := by dsimp; unfold CommaHom.comp; congr; rw [comp_assoc]; rw [comp_assoc]

variable (Œ± : Sort u) [Category Œ±]

-- Arrow categories
def Arrow := Comma (Functor.id Œ±) (Functor.id Œ±)
def CatArrow := CatComma (Functor.id Œ±) (Functor.id Œ±)

-- Slice categories
def Slice (X : Œ±) := Comma (Functor.id Œ±) (Functor.const Œ± X)
def CatSlice (X : Œ±) := CatComma (Functor.id Œ±) (Functor.const Œ± X)

-- Coslice categories
def Coslice (X : Œ±) := Comma (Functor.const Œ± X) (Functor.id Œ±)
def CatCoslice (X : Œ±) := CatComma (Functor.const Œ± X) (Functor.id Œ±)

end CategoryTheory
